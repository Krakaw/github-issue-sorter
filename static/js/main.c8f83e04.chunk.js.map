{"version":3,"sources":["components/repos.js","components/repo.js","App.js","serviceWorker.js","index.js"],"names":["Repos","state","selectedDate","moment","startOf","username","localStorage","getItem","password","since","this","props","setState","onDateChange","_this2","classes","_this$state","react_default","a","createElement","Fragment","Grid","container","className","grid","justify","material_ui_pickers_esm","utils","MomentUtils","value","onChange","handleDateChange","bind","label","ampm","TextField","type","e","target","trim","setItem","Component","withStyles","theme","width","ReactMarkdown","require","Label","style","backgroundColor","concat","borderRadius","padding","Repo","issues","expand","fetchIssues","prevProps","repo","config","params","sort","direction","Authorization","btoa","headers","console","log","axios","get","data","_this$props2","xs","sm","md","lg","item","cardColumn","Typography","gutterBottom","variant","map","issue","key","number","title","updatedAt","updated_at","format","Card","card","flex","Link","href","html_url","labels","index","repo_Label","name","color","user","login","CardContent","cardContent","onClick","component","source","body","substr","icon","marginRight","spacing","heroContent","palette","background","paper","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","flexDirection","display","cardMedia","flexGrow","footer","App","repos","CssBaseline","Container","maxWidth","components_repos","components_repo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f83e04.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport Grid from '@material-ui/core/Grid';\nimport {withStyles} from \"@material-ui/core\";\nimport MomentUtils from '@date-io/moment';\nimport {\n    MuiPickersUtilsProvider,\n    DateTimePicker\n} from '@material-ui/pickers';\nimport moment from 'moment';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = theme => ({\n    grid: {\n        width: '60%',\n    },\n});\n\nclass Repos extends Component {\n\n    state = {\n        selectedDate: moment().startOf('day'),\n        username: localStorage.getItem('username') || '',\n        password: localStorage.getItem('password') || ''\n    };\n\n    componentDidMount() {\n        const {since} = this.props;\n        this.setState({since})\n    }\n\n    handleDateChange(selectedDate) {\n        const {onDateChange} = this.props;\n        this.setState({selectedDate});\n        onDateChange(selectedDate);\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {selectedDate, username, password} = this.state;\n\n\n\n\n        return (\n            <React.Fragment>\n                <Grid container className={classes.grid} justify=\"space-around\">\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n\n                    <DateTimePicker\n                        value={selectedDate}\n                        onChange={this.handleDateChange.bind(this)}\n                        label=\"Starting From\"\n                        ampm={false}\n                        />\n\n            </MuiPickersUtilsProvider>\n                <TextField type=\"text\" value={username} label=\"Github Username\" onChange={(e) => {\n\n                    let username = e.target.value.trim();\n                    localStorage.setItem(\"username\", username);\n                    this.setState({username});\n                }}/>\n                <TextField type=\"password\" value={password} label=\"Github Password\" onChange={(e) => {\n\n                    let password = e.target.value.trim();\n                    localStorage.setItem(\"password\", password);\n                    this.setState({password});\n                }}/>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\nRepos.propTypes = {\n    since: PropTypes.object.isRequired,\n    onDateChange: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(Repos);\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {withStyles} from \"@material-ui/core\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst ReactMarkdown = require('react-markdown')\n\nconst styles = theme => ({\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    heroContent: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n        flexDirection: 'row'\n    },\n    cardColumn: {\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    card: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardMedia: {\n        paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    flex: {\n        display: 'flex'\n    },\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n    padding:{\n        padding: '5px'\n    }\n});\n\nconst Label = props => {\n    return (\n        <span style={{backgroundColor: `#${props.backgroundColor}`, borderRadius: '5px', padding: '2px'}}>{props.label}</span>\n    )\n}\n\nclass Repo extends Component {\n\n    state = {\n        issues: [],\n        expand: {}\n    };\n\n    async componentDidMount() {\n        await this.fetchIssues();\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (prevProps.since != this.props.since) {\n            await this.fetchIssues();\n        }\n    }\n\n    async fetchIssues() {\n        const {repo, since} = this.props;\n        const sort = 'updated';\n        const direction = 'desc';\n        const username = localStorage.getItem('username');\n        const password = localStorage.getItem('password');\n        const config = {\n            params: {since, sort, direction}\n        };\n        if (username && password) {\n            const Authorization = `Basic ${btoa(username + \":\" + password)}`;\n            config.headers = {\n                Authorization\n            };\n        } else {\n            console.log(\"Attempting without auth\")\n        }\n        let issues = await axios.get(`https://api.github.com/repos/${repo}/issues`, config);\n        this.setState({issues: issues.data});\n    }\n\n\n    render() {\n        const {classes, repo} = this.props;\n        const {issues, since} = this.state;\n        const {expand} = this.state;\n        return (\n            <Grid xs={12} sm={6} md={4} lg={3} item className={classes.cardColumn}>\n\n                <Typography gutterBottom variant=\"h5\">{repo}</Typography>\n                {issues.map(issue => {\n                    const key = repo + '#' + issue.number;\n                    const title = `#${issue.number}`;\n                    const updatedAt = moment(issue.updated_at).format('YYYY-MM-DD HH:mm');\n                    return (\n                        <Card key={key} className={classes.card}>\n\n                            <div className={classes.padding}>\n                                <Typography variant=\"h6\" className={classes.flex}>\n                                    <Link href={issue.html_url} target=\"_blank\">{title}</Link>\n                                    <span style={{flex: 1}}></span>\n                                    <span>{issue.state}</span>\n                                </Typography>\n                                {issue.labels.map((label, index) => <Label key={index} label={label.name} backgroundColor={label.color}></Label>)}\n                                <Typography variant=\"caption\" className={classes.flex}>\n                                    <span>{issue.user.login}</span>\n                                    <span style={{flex: 1}}></span>\n                                    <span>{updatedAt}</span>\n                                </Typography>\n                            </div>\n                            <CardContent className={classes.cardContent} onClick={e => {\n                                expand[key] = !expand[key];\n                                this.setState({expand});\n                            }}>\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                    {issue.title}\n                                </Typography>\n                                {expand[key] ?\n                                    <ReactMarkdown source={issue.body}/> : issue.body.substr(0, 100)}\n                            </CardContent>\n\n\n                        </Card>\n                    )\n                })}\n            </Grid>\n\n        )\n    }\n}\n\nRepo.propTypes = {\n    repo: PropTypes.string.isRequired,\n    since: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Repo);\n","import React, {Component} from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css';\nimport Repos from './components/repos';\nimport Repo from './components/repo';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport moment from \"moment\";\n\nclass App extends Component {\n    state= {\n        since: moment().startOf('day'),\n        repos: [\n            'big-neon/bigneon',\n            'big-neon/bn-api',\n            'big-neon/bn-web',\n            'big-neon/bn-ios',\n            'big-neon/bn-android-doorperson',\n            'big-neon/bn-mobile-react',\n        ]\n    };\n\n    onDateChange(since) {\n        this.setState({since});\n    }\n    render() {\n        const {since, repos} = this.state;\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Container maxWidth=\"xl\">\n                    <Repos since={since} onDateChange={this.onDateChange.bind(this)}></Repos>\n                    <Grid container spacing={1} style={{display: 'flex'}}>\n                        {repos.map(repo => (<Repo since={since} key={repo} repo={repo}></Repo>))}\n                    </Grid>\n                </Container>\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}